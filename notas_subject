Your program(s) must take the following arguments:

number_of_philosophers time_to_die time_to_eat time_to_sleep

OPTIONAL-> [number_of_times_each_philosopher_must_eat]

◦ number_of_philosophers: The number of philosophers and also the number of forks.

◦ time_to_die (in milliseconds): If a philosopher has not started eating within
	time_to_die milliseconds since the start of their last meal or the start of the
	simulation, they die.

◦ time_to_eat (in milliseconds): The time it takes for a philosopher to eat.
	During that time, they will need to hold two forks.

◦ time_to_sleep (in milliseconds): The time a philosopher will spend sleeping.

◦ number_of_times_each_philosopher_must_eat (optional argument): If all
	philosophers have eaten at least number_of_times_each_philosopher_must_eat
	times, the simulation stops. If not specified, the simulation stops when a
	philosopher dies.

• Each philosopher has a number ranging from 1 to number_of_philosophers.

• Philosopher number 1 sits next to philosopher number number_of_philosophers.
	Any other philosopher, numbered N, sits between philosopher N - 1 and philosopher N + 1

About the logs of your program:
• Any state change of a philosopher must be formatted as follows:
◦ timestamp_in_ms X has taken a fork
◦ timestamp_in_ms X is eating
◦ timestamp_in_ms X is sleeping
◦ timestamp_in_ms X is thinking
◦ timestamp_in_ms X died
Replace timestamp_in_ms with the current timestamp in milliseconds
and X with the philosopher number.
• A displayed state message should not overlap with another message.
• A message announcing a philosopher’s death must be displayed within 10 ms of
their actual death.


todos pegarem no da esquerda, menos o ultimo. O ultimo comeca pela direita. <- uma tecnica
se o index comeca por impar comeca pela esq ou direita e vice versa <- outra tecnica